{"version":3,"sources":["webpack://pxplus/external \"vscode\"","webpack://pxplus/webpack/bootstrap","webpack://pxplus/./src/extension.ts"],"names":["module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__","context","console","log","vscode","languages","registerHoverProvider","document","position","token","range","getWordRangeAtPosition","getText","content","MarkdownString","appendMarkdown","Hover","value"],"mappings":"kCAAAA,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUJ,QAG3C,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAK,EAAoBD,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,Q,uGClBf,eAIA,oBAAyBM,GAIxBC,QAAQC,IAAI,2DAcTC,EAAOC,UAAUC,sBAAsB,SAAU,CAC7C,aAAaC,EAA8BC,EAA2BC,GAC3E,MAAMC,EAAQH,EAASI,uBAAuBH,GAE9C,OADsBD,EAASK,QAAQF,IAEtC,IAAK,SACJ,IAAIG,EAAiC,IAAIT,EAAOU,eAAe,mDAU/D,OATAD,EAAQE,eAAe,yDACvBF,EAAQE,eAAe,qDACvBF,EAAQE,eAAe,6DACvBF,EAAQE,eAAe,gDACvBF,EAAQE,eAAe,gBACvBF,EAAQE,eAAe,2FACvBF,EAAQE,eAAe,qFACvBF,EAAQE,eAAe,+CAEhB,IAAIX,EAAOY,MACjBH,EAAQI,YAYd,2B","file":"extension.js","sourcesContent":["module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\r\n// Import the module and reference it with the alias vscode in your code below\r\nimport * as vscode from 'vscode';\r\n\r\n// this method is called when your extension is activated\r\n// your extension is activated the very first time the command is executed\r\nexport function activate(context: vscode.ExtensionContext) {\r\n\r\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\r\n\t// This line of code will only be executed once when your extension is activated\r\n\tconsole.log('Congratulations, your extension \"pxplus\" is now active!');\r\n\r\n\t// // The command has been defined in the package.json file\r\n\t// // Now provide the implementation of the command with registerCommand\r\n\t// // The commandId parameter must match the command field in package.json\r\n\t// let disposable = vscode.commands.registerCommand('test.helloWorld', () => {\r\n\t// \t// The code you place here will be executed every time your command is executed\r\n\r\n\t// \t// Display a message box to the user\r\n\t// \tvscode.window.showInformationMessage('Hello World from test!');\r\n\t// });\r\n\r\n\t// context.subscriptions.push(disposable);\r\n\r\n    vscode.languages.registerHoverProvider('pxplus', {\r\n        provideHover(document:vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken) {\r\n\t\t\tconst range = document.getWordRangeAtPosition(position);\r\n            const word = document.getText(range);\r\n\t\t\tswitch (word) {\r\n\t\t\t\tcase \"SETESC\":\r\n\t\t\t\t\tlet content: vscode.MarkdownString = new vscode.MarkdownString(\"1. Subroutine Interrupt-Handler: SETESC stmtref\");\r\n\t\t\t\t\tcontent.appendMarkdown(\"\\n 1. Subprogram Interrupt-Handler: SETESC prog_name$\");\r\n\t\t\t\t\tcontent.appendMarkdown(\"\\n 1. Interrupt Process On/Off: SETESC {ON | OFF}\");\r\n\t\t\t\t\tcontent.appendMarkdown(\"\\n 1. Enable/Disable for Range: SETESC {DISABLE | ENABLE}\");\r\n\t\t\t\t\tcontent.appendMarkdown(\"\\n 1. Return Current Program: SETESC READ x$\");\r\n\t\t\t\t\tcontent.appendMarkdown(\"\\n **where**\");\r\n\t\t\t\t\tcontent.appendMarkdown(\"\\n *prog_name$* Name of generic interrupt-handling program. Define it once per session.\");\r\n\t\t\t\t\tcontent.appendMarkdown(\"\\n *stmtref* Program line number or statement label to which to transfer control.\");\r\n\t\t\t\t\tcontent.appendMarkdown(\"\\n *x$* Name of the current SETESC program.\");\r\n\r\n\t\t\t\t\treturn new vscode.Hover(\r\n\t\t\t\t\t\tcontent.value\r\n\t\t\t\t\t)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n        }\r\n      });\r\n}\r\n\r\n// this method is called when your extension is deactivated\r\nexport function deactivate() {}\r\n"],"sourceRoot":""}